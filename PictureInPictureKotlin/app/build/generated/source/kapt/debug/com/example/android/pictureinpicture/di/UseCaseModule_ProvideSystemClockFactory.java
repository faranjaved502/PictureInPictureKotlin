// Generated by Dagger (https://dagger.dev).
package com.example.android.pictureinpicture.di;

import com.example.android.pictureinpicture.usecase.SystemClockWrapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;

@ScopeMetadata("javax.inject.Singleton")
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class UseCaseModule_ProvideSystemClockFactory implements Factory<SystemClockWrapper> {
  private final UseCaseModule module;

  public UseCaseModule_ProvideSystemClockFactory(UseCaseModule module) {
    this.module = module;
  }

  @Override
  public SystemClockWrapper get() {
    return provideSystemClock(module);
  }

  public static UseCaseModule_ProvideSystemClockFactory create(UseCaseModule module) {
    return new UseCaseModule_ProvideSystemClockFactory(module);
  }

  public static SystemClockWrapper provideSystemClock(UseCaseModule instance) {
    return Preconditions.checkNotNullFromProvides(instance.provideSystemClock());
  }
}
