// Generated by Dagger (https://dagger.dev).
package com.example.android.pictureinpicture;

import com.example.android.pictureinpicture.repository.TimerRepository;
import com.example.android.pictureinpicture.usecase.SystemClockWrapper;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainViewModel_Factory implements Factory<MainViewModel> {
  private final Provider<SystemClockWrapper> systemClockWrapperProvider;

  private final Provider<TimerRepository> timerRepositoryProvider;

  public MainViewModel_Factory(Provider<SystemClockWrapper> systemClockWrapperProvider,
      Provider<TimerRepository> timerRepositoryProvider) {
    this.systemClockWrapperProvider = systemClockWrapperProvider;
    this.timerRepositoryProvider = timerRepositoryProvider;
  }

  @Override
  public MainViewModel get() {
    return newInstance(systemClockWrapperProvider.get(), timerRepositoryProvider.get());
  }

  public static MainViewModel_Factory create(
      Provider<SystemClockWrapper> systemClockWrapperProvider,
      Provider<TimerRepository> timerRepositoryProvider) {
    return new MainViewModel_Factory(systemClockWrapperProvider, timerRepositoryProvider);
  }

  public static MainViewModel newInstance(SystemClockWrapper systemClockWrapper,
      TimerRepository timerRepository) {
    return new MainViewModel(systemClockWrapper, timerRepository);
  }
}
